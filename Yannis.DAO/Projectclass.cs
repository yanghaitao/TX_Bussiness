using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Yannis.DAO
{
	/// <summary>
	/// Strongly-typed collection for the Projectclass class.
	/// </summary>
    [Serializable]
	public partial class ProjectclassCollection : ActiveList<Projectclass, ProjectclassCollection>
	{	   
		public ProjectclassCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProjectclassCollection</returns>
		public ProjectclassCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Projectclass o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the projectclass table.
	/// </summary>
	[Serializable]
	public partial class Projectclass : ActiveRecord<Projectclass>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Projectclass()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Projectclass(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Projectclass(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Projectclass(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("projectclass", TableType.Table, DataService.GetInstance("Yannis_DAO"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarClassid = new TableSchema.TableColumn(schema);
				colvarClassid.ColumnName = "classid";
				colvarClassid.DataType = DbType.String;
				colvarClassid.MaxLength = 50;
				colvarClassid.AutoIncrement = false;
				colvarClassid.IsNullable = true;
				colvarClassid.IsPrimaryKey = false;
				colvarClassid.IsForeignKey = false;
				colvarClassid.IsReadOnly = false;
				colvarClassid.DefaultSetting = @"";
				colvarClassid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClassid);
				
				TableSchema.TableColumn colvarClassname = new TableSchema.TableColumn(schema);
				colvarClassname.ColumnName = "classname";
				colvarClassname.DataType = DbType.String;
				colvarClassname.MaxLength = 50;
				colvarClassname.AutoIncrement = false;
				colvarClassname.IsNullable = true;
				colvarClassname.IsPrimaryKey = false;
				colvarClassname.IsForeignKey = false;
				colvarClassname.IsReadOnly = false;
				colvarClassname.DefaultSetting = @"";
				colvarClassname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClassname);
				
				TableSchema.TableColumn colvarClasstype = new TableSchema.TableColumn(schema);
				colvarClasstype.ColumnName = "classtype";
				colvarClasstype.DataType = DbType.Int32;
				colvarClasstype.MaxLength = 0;
				colvarClasstype.AutoIncrement = false;
				colvarClasstype.IsNullable = true;
				colvarClasstype.IsPrimaryKey = false;
				colvarClasstype.IsForeignKey = false;
				colvarClasstype.IsReadOnly = false;
				colvarClasstype.DefaultSetting = @"";
				colvarClasstype.ForeignKeyTableName = "";
				schema.Columns.Add(colvarClasstype);
				
				TableSchema.TableColumn colvarParentid = new TableSchema.TableColumn(schema);
				colvarParentid.ColumnName = "parentid";
				colvarParentid.DataType = DbType.String;
				colvarParentid.MaxLength = 50;
				colvarParentid.AutoIncrement = false;
				colvarParentid.IsNullable = true;
				colvarParentid.IsPrimaryKey = false;
				colvarParentid.IsForeignKey = false;
				colvarParentid.IsReadOnly = false;
				colvarParentid.DefaultSetting = @"";
				colvarParentid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentid);
				
				TableSchema.TableColumn colvarIsdel = new TableSchema.TableColumn(schema);
				colvarIsdel.ColumnName = "isdel";
				colvarIsdel.DataType = DbType.Boolean;
				colvarIsdel.MaxLength = 0;
				colvarIsdel.AutoIncrement = false;
				colvarIsdel.IsNullable = false;
				colvarIsdel.IsPrimaryKey = false;
				colvarIsdel.IsForeignKey = false;
				colvarIsdel.IsReadOnly = false;
				
						colvarIsdel.DefaultSetting = @"((0))";
				colvarIsdel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsdel);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Yannis_DAO"].AddSchema("projectclass",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Classid")]
		[Bindable(true)]
		public string Classid 
		{
			get { return GetColumnValue<string>(Columns.Classid); }
			set { SetColumnValue(Columns.Classid, value); }
		}
		  
		[XmlAttribute("Classname")]
		[Bindable(true)]
		public string Classname 
		{
			get { return GetColumnValue<string>(Columns.Classname); }
			set { SetColumnValue(Columns.Classname, value); }
		}
		  
		[XmlAttribute("Classtype")]
		[Bindable(true)]
		public int? Classtype 
		{
			get { return GetColumnValue<int?>(Columns.Classtype); }
			set { SetColumnValue(Columns.Classtype, value); }
		}
		  
		[XmlAttribute("Parentid")]
		[Bindable(true)]
		public string Parentid 
		{
			get { return GetColumnValue<string>(Columns.Parentid); }
			set { SetColumnValue(Columns.Parentid, value); }
		}
		  
		[XmlAttribute("Isdel")]
		[Bindable(true)]
		public bool Isdel 
		{
			get { return GetColumnValue<bool>(Columns.Isdel); }
			set { SetColumnValue(Columns.Isdel, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varClassid,string varClassname,int? varClasstype,string varParentid,bool varIsdel)
		{
			Projectclass item = new Projectclass();
			
			item.Classid = varClassid;
			
			item.Classname = varClassname;
			
			item.Classtype = varClasstype;
			
			item.Parentid = varParentid;
			
			item.Isdel = varIsdel;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varClassid,string varClassname,int? varClasstype,string varParentid,bool varIsdel)
		{
			Projectclass item = new Projectclass();
			
				item.Id = varId;
			
				item.Classid = varClassid;
			
				item.Classname = varClassname;
			
				item.Classtype = varClasstype;
			
				item.Parentid = varParentid;
			
				item.Isdel = varIsdel;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ClassidColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ClassnameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ClasstypeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentidColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn IsdelColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Classid = @"classid";
			 public static string Classname = @"classname";
			 public static string Classtype = @"classtype";
			 public static string Parentid = @"parentid";
			 public static string Isdel = @"isdel";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
