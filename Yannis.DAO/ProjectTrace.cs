using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Yannis.DAO
{
	/// <summary>
	/// Strongly-typed collection for the ProjectTrace class.
	/// </summary>
    [Serializable]
	public partial class ProjectTraceCollection : ActiveList<ProjectTrace, ProjectTraceCollection>
	{	   
		public ProjectTraceCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>ProjectTraceCollection</returns>
		public ProjectTraceCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                ProjectTrace o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the project_trace table.
	/// </summary>
	[Serializable]
	public partial class ProjectTrace : ActiveRecord<ProjectTrace>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public ProjectTrace()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public ProjectTrace(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public ProjectTrace(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public ProjectTrace(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("project_trace", TableType.Table, DataService.GetInstance("Yannis_DAO"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProjcode = new TableSchema.TableColumn(schema);
				colvarProjcode.ColumnName = "projcode";
				colvarProjcode.DataType = DbType.String;
				colvarProjcode.MaxLength = 200;
				colvarProjcode.AutoIncrement = false;
				colvarProjcode.IsNullable = true;
				colvarProjcode.IsPrimaryKey = false;
				colvarProjcode.IsForeignKey = false;
				colvarProjcode.IsReadOnly = false;
				colvarProjcode.DefaultSetting = @"";
				colvarProjcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjcode);
				
				TableSchema.TableColumn colvarActionname = new TableSchema.TableColumn(schema);
				colvarActionname.ColumnName = "actionname";
				colvarActionname.DataType = DbType.String;
				colvarActionname.MaxLength = 50;
				colvarActionname.AutoIncrement = false;
				colvarActionname.IsNullable = true;
				colvarActionname.IsPrimaryKey = false;
				colvarActionname.IsForeignKey = false;
				colvarActionname.IsReadOnly = false;
				colvarActionname.DefaultSetting = @"";
				colvarActionname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarActionname);
				
				TableSchema.TableColumn colvarOperatorid = new TableSchema.TableColumn(schema);
				colvarOperatorid.ColumnName = "operatorid";
				colvarOperatorid.DataType = DbType.Int32;
				colvarOperatorid.MaxLength = 0;
				colvarOperatorid.AutoIncrement = false;
				colvarOperatorid.IsNullable = true;
				colvarOperatorid.IsPrimaryKey = false;
				colvarOperatorid.IsForeignKey = false;
				colvarOperatorid.IsReadOnly = false;
				colvarOperatorid.DefaultSetting = @"";
				colvarOperatorid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperatorid);
				
				TableSchema.TableColumn colvarOperatorname = new TableSchema.TableColumn(schema);
				colvarOperatorname.ColumnName = "operatorname";
				colvarOperatorname.DataType = DbType.String;
				colvarOperatorname.MaxLength = 50;
				colvarOperatorname.AutoIncrement = false;
				colvarOperatorname.IsNullable = true;
				colvarOperatorname.IsPrimaryKey = false;
				colvarOperatorname.IsForeignKey = false;
				colvarOperatorname.IsReadOnly = false;
				colvarOperatorname.DefaultSetting = @"";
				colvarOperatorname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperatorname);
				
				TableSchema.TableColumn colvarOperatordate = new TableSchema.TableColumn(schema);
				colvarOperatordate.ColumnName = "operatordate";
				colvarOperatordate.DataType = DbType.DateTime;
				colvarOperatordate.MaxLength = 0;
				colvarOperatordate.AutoIncrement = false;
				colvarOperatordate.IsNullable = true;
				colvarOperatordate.IsPrimaryKey = false;
				colvarOperatordate.IsForeignKey = false;
				colvarOperatordate.IsReadOnly = false;
				colvarOperatordate.DefaultSetting = @"";
				colvarOperatordate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperatordate);
				
				TableSchema.TableColumn colvarPrenodeid = new TableSchema.TableColumn(schema);
				colvarPrenodeid.ColumnName = "prenodeid";
				colvarPrenodeid.DataType = DbType.Int32;
				colvarPrenodeid.MaxLength = 0;
				colvarPrenodeid.AutoIncrement = false;
				colvarPrenodeid.IsNullable = true;
				colvarPrenodeid.IsPrimaryKey = false;
				colvarPrenodeid.IsForeignKey = false;
				colvarPrenodeid.IsReadOnly = false;
				colvarPrenodeid.DefaultSetting = @"";
				colvarPrenodeid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPrenodeid);
				
				TableSchema.TableColumn colvarCurrentnodeid = new TableSchema.TableColumn(schema);
				colvarCurrentnodeid.ColumnName = "currentnodeid";
				colvarCurrentnodeid.DataType = DbType.Int32;
				colvarCurrentnodeid.MaxLength = 0;
				colvarCurrentnodeid.AutoIncrement = false;
				colvarCurrentnodeid.IsNullable = true;
				colvarCurrentnodeid.IsPrimaryKey = false;
				colvarCurrentnodeid.IsForeignKey = false;
				colvarCurrentnodeid.IsReadOnly = false;
				colvarCurrentnodeid.DefaultSetting = @"";
				colvarCurrentnodeid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCurrentnodeid);
				
				TableSchema.TableColumn colvarOpinion = new TableSchema.TableColumn(schema);
				colvarOpinion.ColumnName = "opinion";
				colvarOpinion.DataType = DbType.String;
				colvarOpinion.MaxLength = 200;
				colvarOpinion.AutoIncrement = false;
				colvarOpinion.IsNullable = true;
				colvarOpinion.IsPrimaryKey = false;
				colvarOpinion.IsForeignKey = false;
				colvarOpinion.IsReadOnly = false;
				colvarOpinion.DefaultSetting = @"";
				colvarOpinion.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOpinion);
				
				TableSchema.TableColumn colvarOperatordepart = new TableSchema.TableColumn(schema);
				colvarOperatordepart.ColumnName = "operatordepart";
				colvarOperatordepart.DataType = DbType.Int32;
				colvarOperatordepart.MaxLength = 0;
				colvarOperatordepart.AutoIncrement = false;
				colvarOperatordepart.IsNullable = true;
				colvarOperatordepart.IsPrimaryKey = false;
				colvarOperatordepart.IsForeignKey = false;
				colvarOperatordepart.IsReadOnly = false;
				colvarOperatordepart.DefaultSetting = @"";
				colvarOperatordepart.ForeignKeyTableName = "";
				schema.Columns.Add(colvarOperatordepart);
				
				TableSchema.TableColumn colvarAcceptdate = new TableSchema.TableColumn(schema);
				colvarAcceptdate.ColumnName = "acceptdate";
				colvarAcceptdate.DataType = DbType.DateTime;
				colvarAcceptdate.MaxLength = 0;
				colvarAcceptdate.AutoIncrement = false;
				colvarAcceptdate.IsNullable = true;
				colvarAcceptdate.IsPrimaryKey = false;
				colvarAcceptdate.IsForeignKey = false;
				colvarAcceptdate.IsReadOnly = false;
				colvarAcceptdate.DefaultSetting = @"";
				colvarAcceptdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAcceptdate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Yannis_DAO"].AddSchema("project_trace",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Projcode")]
		[Bindable(true)]
		public string Projcode 
		{
			get { return GetColumnValue<string>(Columns.Projcode); }
			set { SetColumnValue(Columns.Projcode, value); }
		}
		  
		[XmlAttribute("Actionname")]
		[Bindable(true)]
		public string Actionname 
		{
			get { return GetColumnValue<string>(Columns.Actionname); }
			set { SetColumnValue(Columns.Actionname, value); }
		}
		  
		[XmlAttribute("Operatorid")]
		[Bindable(true)]
		public int? Operatorid 
		{
			get { return GetColumnValue<int?>(Columns.Operatorid); }
			set { SetColumnValue(Columns.Operatorid, value); }
		}
		  
		[XmlAttribute("Operatorname")]
		[Bindable(true)]
		public string Operatorname 
		{
			get { return GetColumnValue<string>(Columns.Operatorname); }
			set { SetColumnValue(Columns.Operatorname, value); }
		}
		  
		[XmlAttribute("Operatordate")]
		[Bindable(true)]
		public DateTime? Operatordate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Operatordate); }
			set { SetColumnValue(Columns.Operatordate, value); }
		}
		  
		[XmlAttribute("Prenodeid")]
		[Bindable(true)]
		public int? Prenodeid 
		{
			get { return GetColumnValue<int?>(Columns.Prenodeid); }
			set { SetColumnValue(Columns.Prenodeid, value); }
		}
		  
		[XmlAttribute("Currentnodeid")]
		[Bindable(true)]
		public int? Currentnodeid 
		{
			get { return GetColumnValue<int?>(Columns.Currentnodeid); }
			set { SetColumnValue(Columns.Currentnodeid, value); }
		}
		  
		[XmlAttribute("Opinion")]
		[Bindable(true)]
		public string Opinion 
		{
			get { return GetColumnValue<string>(Columns.Opinion); }
			set { SetColumnValue(Columns.Opinion, value); }
		}
		  
		[XmlAttribute("Operatordepart")]
		[Bindable(true)]
		public int? Operatordepart 
		{
			get { return GetColumnValue<int?>(Columns.Operatordepart); }
			set { SetColumnValue(Columns.Operatordepart, value); }
		}
		  
		[XmlAttribute("Acceptdate")]
		[Bindable(true)]
		public DateTime? Acceptdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Acceptdate); }
			set { SetColumnValue(Columns.Acceptdate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varProjcode,string varActionname,int? varOperatorid,string varOperatorname,DateTime? varOperatordate,int? varPrenodeid,int? varCurrentnodeid,string varOpinion,int? varOperatordepart,DateTime? varAcceptdate)
		{
			ProjectTrace item = new ProjectTrace();
			
			item.Projcode = varProjcode;
			
			item.Actionname = varActionname;
			
			item.Operatorid = varOperatorid;
			
			item.Operatorname = varOperatorname;
			
			item.Operatordate = varOperatordate;
			
			item.Prenodeid = varPrenodeid;
			
			item.Currentnodeid = varCurrentnodeid;
			
			item.Opinion = varOpinion;
			
			item.Operatordepart = varOperatordepart;
			
			item.Acceptdate = varAcceptdate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varProjcode,string varActionname,int? varOperatorid,string varOperatorname,DateTime? varOperatordate,int? varPrenodeid,int? varCurrentnodeid,string varOpinion,int? varOperatordepart,DateTime? varAcceptdate)
		{
			ProjectTrace item = new ProjectTrace();
			
				item.Id = varId;
			
				item.Projcode = varProjcode;
			
				item.Actionname = varActionname;
			
				item.Operatorid = varOperatorid;
			
				item.Operatorname = varOperatorname;
			
				item.Operatordate = varOperatordate;
			
				item.Prenodeid = varPrenodeid;
			
				item.Currentnodeid = varCurrentnodeid;
			
				item.Opinion = varOpinion;
			
				item.Operatordepart = varOperatordepart;
			
				item.Acceptdate = varAcceptdate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjcodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn ActionnameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn OperatoridColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn OperatornameColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn OperatordateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn PrenodeidColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn CurrentnodeidColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn OpinionColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn OperatordepartColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AcceptdateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Projcode = @"projcode";
			 public static string Actionname = @"actionname";
			 public static string Operatorid = @"operatorid";
			 public static string Operatorname = @"operatorname";
			 public static string Operatordate = @"operatordate";
			 public static string Prenodeid = @"prenodeid";
			 public static string Currentnodeid = @"currentnodeid";
			 public static string Opinion = @"opinion";
			 public static string Operatordepart = @"operatordepart";
			 public static string Acceptdate = @"acceptdate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
