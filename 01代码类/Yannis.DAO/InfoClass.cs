using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Yannis.DAO
{
	/// <summary>
	/// Strongly-typed collection for the InfoClass class.
	/// </summary>
    [Serializable]
	public partial class InfoClassCollection : ActiveList<InfoClass, InfoClassCollection>
	{	   
		public InfoClassCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InfoClassCollection</returns>
		public InfoClassCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InfoClass o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the info_class table.
	/// </summary>
	[Serializable]
	public partial class InfoClass : ActiveRecord<InfoClass>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InfoClass()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InfoClass(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InfoClass(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InfoClass(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("info_class", TableType.Table, DataService.GetInstance("Yannis_DAO"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProjectcode = new TableSchema.TableColumn(schema);
				colvarProjectcode.ColumnName = "projectcode";
				colvarProjectcode.DataType = DbType.String;
				colvarProjectcode.MaxLength = 50;
				colvarProjectcode.AutoIncrement = false;
				colvarProjectcode.IsNullable = true;
				colvarProjectcode.IsPrimaryKey = false;
				colvarProjectcode.IsForeignKey = false;
				colvarProjectcode.IsReadOnly = false;
				colvarProjectcode.DefaultSetting = @"";
				colvarProjectcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjectcode);
				
				TableSchema.TableColumn colvarBigclasscode = new TableSchema.TableColumn(schema);
				colvarBigclasscode.ColumnName = "bigclasscode";
				colvarBigclasscode.DataType = DbType.String;
				colvarBigclasscode.MaxLength = 50;
				colvarBigclasscode.AutoIncrement = false;
				colvarBigclasscode.IsNullable = true;
				colvarBigclasscode.IsPrimaryKey = false;
				colvarBigclasscode.IsForeignKey = false;
				colvarBigclasscode.IsReadOnly = false;
				colvarBigclasscode.DefaultSetting = @"";
				colvarBigclasscode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBigclasscode);
				
				TableSchema.TableColumn colvarBigclassname = new TableSchema.TableColumn(schema);
				colvarBigclassname.ColumnName = "bigclassname";
				colvarBigclassname.DataType = DbType.String;
				colvarBigclassname.MaxLength = 50;
				colvarBigclassname.AutoIncrement = false;
				colvarBigclassname.IsNullable = true;
				colvarBigclassname.IsPrimaryKey = false;
				colvarBigclassname.IsForeignKey = false;
				colvarBigclassname.IsReadOnly = false;
				colvarBigclassname.DefaultSetting = @"";
				colvarBigclassname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBigclassname);
				
				TableSchema.TableColumn colvarSmallclasscode = new TableSchema.TableColumn(schema);
				colvarSmallclasscode.ColumnName = "smallclasscode";
				colvarSmallclasscode.DataType = DbType.String;
				colvarSmallclasscode.MaxLength = 50;
				colvarSmallclasscode.AutoIncrement = false;
				colvarSmallclasscode.IsNullable = true;
				colvarSmallclasscode.IsPrimaryKey = false;
				colvarSmallclasscode.IsForeignKey = false;
				colvarSmallclasscode.IsReadOnly = false;
				colvarSmallclasscode.DefaultSetting = @"";
				colvarSmallclasscode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSmallclasscode);
				
				TableSchema.TableColumn colvarSmallclassanme = new TableSchema.TableColumn(schema);
				colvarSmallclassanme.ColumnName = "smallclassanme";
				colvarSmallclassanme.DataType = DbType.String;
				colvarSmallclassanme.MaxLength = 50;
				colvarSmallclassanme.AutoIncrement = false;
				colvarSmallclassanme.IsNullable = true;
				colvarSmallclassanme.IsPrimaryKey = false;
				colvarSmallclassanme.IsForeignKey = false;
				colvarSmallclassanme.IsReadOnly = false;
				colvarSmallclassanme.DefaultSetting = @"";
				colvarSmallclassanme.ForeignKeyTableName = "";
				schema.Columns.Add(colvarSmallclassanme);
				
				TableSchema.TableColumn colvarAdddate = new TableSchema.TableColumn(schema);
				colvarAdddate.ColumnName = "adddate";
				colvarAdddate.DataType = DbType.DateTime;
				colvarAdddate.MaxLength = 0;
				colvarAdddate.AutoIncrement = false;
				colvarAdddate.IsNullable = true;
				colvarAdddate.IsPrimaryKey = false;
				colvarAdddate.IsForeignKey = false;
				colvarAdddate.IsReadOnly = false;
				colvarAdddate.DefaultSetting = @"";
				colvarAdddate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdddate);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Yannis_DAO"].AddSchema("info_class",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Projectcode")]
		[Bindable(true)]
		public string Projectcode 
		{
			get { return GetColumnValue<string>(Columns.Projectcode); }
			set { SetColumnValue(Columns.Projectcode, value); }
		}
		  
		[XmlAttribute("Bigclasscode")]
		[Bindable(true)]
		public string Bigclasscode 
		{
			get { return GetColumnValue<string>(Columns.Bigclasscode); }
			set { SetColumnValue(Columns.Bigclasscode, value); }
		}
		  
		[XmlAttribute("Bigclassname")]
		[Bindable(true)]
		public string Bigclassname 
		{
			get { return GetColumnValue<string>(Columns.Bigclassname); }
			set { SetColumnValue(Columns.Bigclassname, value); }
		}
		  
		[XmlAttribute("Smallclasscode")]
		[Bindable(true)]
		public string Smallclasscode 
		{
			get { return GetColumnValue<string>(Columns.Smallclasscode); }
			set { SetColumnValue(Columns.Smallclasscode, value); }
		}
		  
		[XmlAttribute("Smallclassanme")]
		[Bindable(true)]
		public string Smallclassanme 
		{
			get { return GetColumnValue<string>(Columns.Smallclassanme); }
			set { SetColumnValue(Columns.Smallclassanme, value); }
		}
		  
		[XmlAttribute("Adddate")]
		[Bindable(true)]
		public DateTime? Adddate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Adddate); }
			set { SetColumnValue(Columns.Adddate, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varProjectcode,string varBigclasscode,string varBigclassname,string varSmallclasscode,string varSmallclassanme,DateTime? varAdddate)
		{
			InfoClass item = new InfoClass();
			
			item.Projectcode = varProjectcode;
			
			item.Bigclasscode = varBigclasscode;
			
			item.Bigclassname = varBigclassname;
			
			item.Smallclasscode = varSmallclasscode;
			
			item.Smallclassanme = varSmallclassanme;
			
			item.Adddate = varAdddate;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varProjectcode,string varBigclasscode,string varBigclassname,string varSmallclasscode,string varSmallclassanme,DateTime? varAdddate)
		{
			InfoClass item = new InfoClass();
			
				item.Id = varId;
			
				item.Projectcode = varProjectcode;
			
				item.Bigclasscode = varBigclasscode;
			
				item.Bigclassname = varBigclassname;
			
				item.Smallclasscode = varSmallclasscode;
			
				item.Smallclassanme = varSmallclassanme;
			
				item.Adddate = varAdddate;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjectcodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn BigclasscodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn BigclassnameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn SmallclasscodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn SmallclassanmeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AdddateColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Projectcode = @"projectcode";
			 public static string Bigclasscode = @"bigclasscode";
			 public static string Bigclassname = @"bigclassname";
			 public static string Smallclasscode = @"smallclasscode";
			 public static string Smallclassanme = @"smallclassanme";
			 public static string Adddate = @"adddate";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
