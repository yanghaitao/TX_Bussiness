using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Yannis.DAO
{
	/// <summary>
	/// Strongly-typed collection for the User class.
	/// </summary>
    [Serializable]
	public partial class UserCollection : ActiveList<User, UserCollection>
	{	   
		public UserCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>UserCollection</returns>
		public UserCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                User o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the users table.
	/// </summary>
	[Serializable]
	public partial class User : ActiveRecord<User>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public User()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public User(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public User(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public User(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("users", TableType.Table, DataService.GetInstance("Yannis_DAO"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarUserid = new TableSchema.TableColumn(schema);
				colvarUserid.ColumnName = "userid";
				colvarUserid.DataType = DbType.Int32;
				colvarUserid.MaxLength = 0;
				colvarUserid.AutoIncrement = false;
				colvarUserid.IsNullable = true;
				colvarUserid.IsPrimaryKey = false;
				colvarUserid.IsForeignKey = false;
				colvarUserid.IsReadOnly = false;
				colvarUserid.DefaultSetting = @"";
				colvarUserid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserid);
				
				TableSchema.TableColumn colvarUsername = new TableSchema.TableColumn(schema);
				colvarUsername.ColumnName = "username";
				colvarUsername.DataType = DbType.String;
				colvarUsername.MaxLength = 50;
				colvarUsername.AutoIncrement = false;
				colvarUsername.IsNullable = true;
				colvarUsername.IsPrimaryKey = false;
				colvarUsername.IsForeignKey = false;
				colvarUsername.IsReadOnly = false;
				colvarUsername.DefaultSetting = @"";
				colvarUsername.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsername);
				
				TableSchema.TableColumn colvarUsermobile = new TableSchema.TableColumn(schema);
				colvarUsermobile.ColumnName = "usermobile";
				colvarUsermobile.DataType = DbType.String;
				colvarUsermobile.MaxLength = 50;
				colvarUsermobile.AutoIncrement = false;
				colvarUsermobile.IsNullable = true;
				colvarUsermobile.IsPrimaryKey = false;
				colvarUsermobile.IsForeignKey = false;
				colvarUsermobile.IsReadOnly = false;
				colvarUsermobile.DefaultSetting = @"";
				colvarUsermobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsermobile);
				
				TableSchema.TableColumn colvarUsertel = new TableSchema.TableColumn(schema);
				colvarUsertel.ColumnName = "usertel";
				colvarUsertel.DataType = DbType.String;
				colvarUsertel.MaxLength = 50;
				colvarUsertel.AutoIncrement = false;
				colvarUsertel.IsNullable = true;
				colvarUsertel.IsPrimaryKey = false;
				colvarUsertel.IsForeignKey = false;
				colvarUsertel.IsReadOnly = false;
				colvarUsertel.DefaultSetting = @"";
				colvarUsertel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsertel);
				
				TableSchema.TableColumn colvarUseremail = new TableSchema.TableColumn(schema);
				colvarUseremail.ColumnName = "useremail";
				colvarUseremail.DataType = DbType.String;
				colvarUseremail.MaxLength = 50;
				colvarUseremail.AutoIncrement = false;
				colvarUseremail.IsNullable = true;
				colvarUseremail.IsPrimaryKey = false;
				colvarUseremail.IsForeignKey = false;
				colvarUseremail.IsReadOnly = false;
				colvarUseremail.DefaultSetting = @"";
				colvarUseremail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUseremail);
				
				TableSchema.TableColumn colvarLoginname = new TableSchema.TableColumn(schema);
				colvarLoginname.ColumnName = "loginname";
				colvarLoginname.DataType = DbType.String;
				colvarLoginname.MaxLength = 50;
				colvarLoginname.AutoIncrement = false;
				colvarLoginname.IsNullable = true;
				colvarLoginname.IsPrimaryKey = false;
				colvarLoginname.IsForeignKey = false;
				colvarLoginname.IsReadOnly = false;
				colvarLoginname.DefaultSetting = @"";
				colvarLoginname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoginname);
				
				TableSchema.TableColumn colvarPassword = new TableSchema.TableColumn(schema);
				colvarPassword.ColumnName = "password";
				colvarPassword.DataType = DbType.String;
				colvarPassword.MaxLength = 50;
				colvarPassword.AutoIncrement = false;
				colvarPassword.IsNullable = true;
				colvarPassword.IsPrimaryKey = false;
				colvarPassword.IsForeignKey = false;
				colvarPassword.IsReadOnly = false;
				colvarPassword.DefaultSetting = @"";
				colvarPassword.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPassword);
				
				TableSchema.TableColumn colvarUserphoto = new TableSchema.TableColumn(schema);
				colvarUserphoto.ColumnName = "userphoto";
				colvarUserphoto.DataType = DbType.String;
				colvarUserphoto.MaxLength = 200;
				colvarUserphoto.AutoIncrement = false;
				colvarUserphoto.IsNullable = true;
				colvarUserphoto.IsPrimaryKey = false;
				colvarUserphoto.IsForeignKey = false;
				colvarUserphoto.IsReadOnly = false;
				colvarUserphoto.DefaultSetting = @"";
				colvarUserphoto.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUserphoto);
				
				TableSchema.TableColumn colvarUsersex = new TableSchema.TableColumn(schema);
				colvarUsersex.ColumnName = "usersex";
				colvarUsersex.DataType = DbType.String;
				colvarUsersex.MaxLength = 10;
				colvarUsersex.AutoIncrement = false;
				colvarUsersex.IsNullable = true;
				colvarUsersex.IsPrimaryKey = false;
				colvarUsersex.IsForeignKey = false;
				colvarUsersex.IsReadOnly = false;
				colvarUsersex.DefaultSetting = @"";
				colvarUsersex.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsersex);
				
				TableSchema.TableColumn colvarRoleid = new TableSchema.TableColumn(schema);
				colvarRoleid.ColumnName = "roleid";
				colvarRoleid.DataType = DbType.Int32;
				colvarRoleid.MaxLength = 0;
				colvarRoleid.AutoIncrement = false;
				colvarRoleid.IsNullable = true;
				colvarRoleid.IsPrimaryKey = false;
				colvarRoleid.IsForeignKey = false;
				colvarRoleid.IsReadOnly = false;
				colvarRoleid.DefaultSetting = @"";
				colvarRoleid.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRoleid);
				
				TableSchema.TableColumn colvarLoginstate = new TableSchema.TableColumn(schema);
				colvarLoginstate.ColumnName = "loginstate";
				colvarLoginstate.DataType = DbType.Int32;
				colvarLoginstate.MaxLength = 0;
				colvarLoginstate.AutoIncrement = false;
				colvarLoginstate.IsNullable = true;
				colvarLoginstate.IsPrimaryKey = false;
				colvarLoginstate.IsForeignKey = false;
				colvarLoginstate.IsReadOnly = false;
				colvarLoginstate.DefaultSetting = @"";
				colvarLoginstate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLoginstate);
				
				TableSchema.TableColumn colvarAccountdtate = new TableSchema.TableColumn(schema);
				colvarAccountdtate.ColumnName = "accountdtate";
				colvarAccountdtate.DataType = DbType.Int32;
				colvarAccountdtate.MaxLength = 0;
				colvarAccountdtate.AutoIncrement = false;
				colvarAccountdtate.IsNullable = true;
				colvarAccountdtate.IsPrimaryKey = false;
				colvarAccountdtate.IsForeignKey = false;
				colvarAccountdtate.IsReadOnly = false;
				colvarAccountdtate.DefaultSetting = @"";
				colvarAccountdtate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAccountdtate);
				
				TableSchema.TableColumn colvarLastlogintime = new TableSchema.TableColumn(schema);
				colvarLastlogintime.ColumnName = "lastlogintime";
				colvarLastlogintime.DataType = DbType.DateTime;
				colvarLastlogintime.MaxLength = 0;
				colvarLastlogintime.AutoIncrement = false;
				colvarLastlogintime.IsNullable = true;
				colvarLastlogintime.IsPrimaryKey = false;
				colvarLastlogintime.IsForeignKey = false;
				colvarLastlogintime.IsReadOnly = false;
				colvarLastlogintime.DefaultSetting = @"";
				colvarLastlogintime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastlogintime);
				
				TableSchema.TableColumn colvarLastloginip = new TableSchema.TableColumn(schema);
				colvarLastloginip.ColumnName = "lastloginip";
				colvarLastloginip.DataType = DbType.String;
				colvarLastloginip.MaxLength = 50;
				colvarLastloginip.AutoIncrement = false;
				colvarLastloginip.IsNullable = true;
				colvarLastloginip.IsPrimaryKey = false;
				colvarLastloginip.IsForeignKey = false;
				colvarLastloginip.IsReadOnly = false;
				colvarLastloginip.DefaultSetting = @"";
				colvarLastloginip.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLastloginip);
				
				TableSchema.TableColumn colvarAdddate = new TableSchema.TableColumn(schema);
				colvarAdddate.ColumnName = "adddate";
				colvarAdddate.DataType = DbType.DateTime;
				colvarAdddate.MaxLength = 0;
				colvarAdddate.AutoIncrement = false;
				colvarAdddate.IsNullable = true;
				colvarAdddate.IsPrimaryKey = false;
				colvarAdddate.IsForeignKey = false;
				colvarAdddate.IsReadOnly = false;
				colvarAdddate.DefaultSetting = @"";
				colvarAdddate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdddate);
				
				TableSchema.TableColumn colvarUsertype = new TableSchema.TableColumn(schema);
				colvarUsertype.ColumnName = "usertype";
				colvarUsertype.DataType = DbType.Int32;
				colvarUsertype.MaxLength = 0;
				colvarUsertype.AutoIncrement = false;
				colvarUsertype.IsNullable = false;
				colvarUsertype.IsPrimaryKey = false;
				colvarUsertype.IsForeignKey = false;
				colvarUsertype.IsReadOnly = false;
				colvarUsertype.DefaultSetting = @"";
				colvarUsertype.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUsertype);
				
				TableSchema.TableColumn colvarCollectorareacode = new TableSchema.TableColumn(schema);
				colvarCollectorareacode.ColumnName = "collectorareacode";
				colvarCollectorareacode.DataType = DbType.String;
				colvarCollectorareacode.MaxLength = 20;
				colvarCollectorareacode.AutoIncrement = false;
				colvarCollectorareacode.IsNullable = true;
				colvarCollectorareacode.IsPrimaryKey = false;
				colvarCollectorareacode.IsForeignKey = false;
				colvarCollectorareacode.IsReadOnly = false;
				colvarCollectorareacode.DefaultSetting = @"";
				colvarCollectorareacode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCollectorareacode);
				
				TableSchema.TableColumn colvarLocation = new TableSchema.TableColumn(schema);
				colvarLocation.ColumnName = "location";
				colvarLocation.DataType = DbType.String;
				colvarLocation.MaxLength = 200;
				colvarLocation.AutoIncrement = false;
				colvarLocation.IsNullable = true;
				colvarLocation.IsPrimaryKey = false;
				colvarLocation.IsForeignKey = false;
				colvarLocation.IsReadOnly = false;
				colvarLocation.DefaultSetting = @"";
				colvarLocation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocation);
				
				TableSchema.TableColumn colvarDepartcode = new TableSchema.TableColumn(schema);
				colvarDepartcode.ColumnName = "departcode";
				colvarDepartcode.DataType = DbType.Int32;
				colvarDepartcode.MaxLength = 0;
				colvarDepartcode.AutoIncrement = false;
				colvarDepartcode.IsNullable = true;
				colvarDepartcode.IsPrimaryKey = false;
				colvarDepartcode.IsForeignKey = false;
				colvarDepartcode.IsReadOnly = false;
				colvarDepartcode.DefaultSetting = @"";
				colvarDepartcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartcode);
				
				TableSchema.TableColumn colvarCommunitycode = new TableSchema.TableColumn(schema);
				colvarCommunitycode.ColumnName = "communitycode";
				colvarCommunitycode.DataType = DbType.String;
				colvarCommunitycode.MaxLength = 20;
				colvarCommunitycode.AutoIncrement = false;
				colvarCommunitycode.IsNullable = true;
				colvarCommunitycode.IsPrimaryKey = false;
				colvarCommunitycode.IsForeignKey = false;
				colvarCommunitycode.IsReadOnly = false;
				colvarCommunitycode.DefaultSetting = @"";
				colvarCommunitycode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommunitycode);
				
				TableSchema.TableColumn colvarStreetcode = new TableSchema.TableColumn(schema);
				colvarStreetcode.ColumnName = "streetcode";
				colvarStreetcode.DataType = DbType.String;
				colvarStreetcode.MaxLength = 20;
				colvarStreetcode.AutoIncrement = false;
				colvarStreetcode.IsNullable = true;
				colvarStreetcode.IsPrimaryKey = false;
				colvarStreetcode.IsForeignKey = false;
				colvarStreetcode.IsReadOnly = false;
				colvarStreetcode.DefaultSetting = @"";
				colvarStreetcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetcode);
				
				TableSchema.TableColumn colvarCollectorgpsstate = new TableSchema.TableColumn(schema);
				colvarCollectorgpsstate.ColumnName = "collectorgpsstate";
				colvarCollectorgpsstate.DataType = DbType.Int32;
				colvarCollectorgpsstate.MaxLength = 0;
				colvarCollectorgpsstate.AutoIncrement = false;
				colvarCollectorgpsstate.IsNullable = true;
				colvarCollectorgpsstate.IsPrimaryKey = false;
				colvarCollectorgpsstate.IsForeignKey = false;
				colvarCollectorgpsstate.IsReadOnly = false;
				colvarCollectorgpsstate.DefaultSetting = @"";
				colvarCollectorgpsstate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCollectorgpsstate);
				
				TableSchema.TableColumn colvarLocaltionupdate = new TableSchema.TableColumn(schema);
				colvarLocaltionupdate.ColumnName = "localtionupdate";
				colvarLocaltionupdate.DataType = DbType.DateTime;
				colvarLocaltionupdate.MaxLength = 0;
				colvarLocaltionupdate.AutoIncrement = false;
				colvarLocaltionupdate.IsNullable = true;
				colvarLocaltionupdate.IsPrimaryKey = false;
				colvarLocaltionupdate.IsForeignKey = false;
				colvarLocaltionupdate.IsReadOnly = false;
				colvarLocaltionupdate.DefaultSetting = @"";
				colvarLocaltionupdate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarLocaltionupdate);
				
				TableSchema.TableColumn colvarIsdel = new TableSchema.TableColumn(schema);
				colvarIsdel.ColumnName = "isdel";
				colvarIsdel.DataType = DbType.Boolean;
				colvarIsdel.MaxLength = 0;
				colvarIsdel.AutoIncrement = false;
				colvarIsdel.IsNullable = false;
				colvarIsdel.IsPrimaryKey = false;
				colvarIsdel.IsForeignKey = false;
				colvarIsdel.IsReadOnly = false;
				
						colvarIsdel.DefaultSetting = @"((0))";
				colvarIsdel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsdel);
				
				TableSchema.TableColumn colvarIsleader = new TableSchema.TableColumn(schema);
				colvarIsleader.ColumnName = "isleader";
				colvarIsleader.DataType = DbType.Boolean;
				colvarIsleader.MaxLength = 0;
				colvarIsleader.AutoIncrement = false;
				colvarIsleader.IsNullable = false;
				colvarIsleader.IsPrimaryKey = false;
				colvarIsleader.IsForeignKey = false;
				colvarIsleader.IsReadOnly = false;
				
						colvarIsleader.DefaultSetting = @"((0))";
				colvarIsleader.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsleader);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Yannis_DAO"].AddSchema("users",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Userid")]
		[Bindable(true)]
		public int? Userid 
		{
			get { return GetColumnValue<int?>(Columns.Userid); }
			set { SetColumnValue(Columns.Userid, value); }
		}
		  
		[XmlAttribute("Username")]
		[Bindable(true)]
		public string Username 
		{
			get { return GetColumnValue<string>(Columns.Username); }
			set { SetColumnValue(Columns.Username, value); }
		}
		  
		[XmlAttribute("Usermobile")]
		[Bindable(true)]
		public string Usermobile 
		{
			get { return GetColumnValue<string>(Columns.Usermobile); }
			set { SetColumnValue(Columns.Usermobile, value); }
		}
		  
		[XmlAttribute("Usertel")]
		[Bindable(true)]
		public string Usertel 
		{
			get { return GetColumnValue<string>(Columns.Usertel); }
			set { SetColumnValue(Columns.Usertel, value); }
		}
		  
		[XmlAttribute("Useremail")]
		[Bindable(true)]
		public string Useremail 
		{
			get { return GetColumnValue<string>(Columns.Useremail); }
			set { SetColumnValue(Columns.Useremail, value); }
		}
		  
		[XmlAttribute("Loginname")]
		[Bindable(true)]
		public string Loginname 
		{
			get { return GetColumnValue<string>(Columns.Loginname); }
			set { SetColumnValue(Columns.Loginname, value); }
		}
		  
		[XmlAttribute("Password")]
		[Bindable(true)]
		public string Password 
		{
			get { return GetColumnValue<string>(Columns.Password); }
			set { SetColumnValue(Columns.Password, value); }
		}
		  
		[XmlAttribute("Userphoto")]
		[Bindable(true)]
		public string Userphoto 
		{
			get { return GetColumnValue<string>(Columns.Userphoto); }
			set { SetColumnValue(Columns.Userphoto, value); }
		}
		  
		[XmlAttribute("Usersex")]
		[Bindable(true)]
		public string Usersex 
		{
			get { return GetColumnValue<string>(Columns.Usersex); }
			set { SetColumnValue(Columns.Usersex, value); }
		}
		  
		[XmlAttribute("Roleid")]
		[Bindable(true)]
		public int? Roleid 
		{
			get { return GetColumnValue<int?>(Columns.Roleid); }
			set { SetColumnValue(Columns.Roleid, value); }
		}
		  
		[XmlAttribute("Loginstate")]
		[Bindable(true)]
		public int? Loginstate 
		{
			get { return GetColumnValue<int?>(Columns.Loginstate); }
			set { SetColumnValue(Columns.Loginstate, value); }
		}
		  
		[XmlAttribute("Accountdtate")]
		[Bindable(true)]
		public int? Accountdtate 
		{
			get { return GetColumnValue<int?>(Columns.Accountdtate); }
			set { SetColumnValue(Columns.Accountdtate, value); }
		}
		  
		[XmlAttribute("Lastlogintime")]
		[Bindable(true)]
		public DateTime? Lastlogintime 
		{
			get { return GetColumnValue<DateTime?>(Columns.Lastlogintime); }
			set { SetColumnValue(Columns.Lastlogintime, value); }
		}
		  
		[XmlAttribute("Lastloginip")]
		[Bindable(true)]
		public string Lastloginip 
		{
			get { return GetColumnValue<string>(Columns.Lastloginip); }
			set { SetColumnValue(Columns.Lastloginip, value); }
		}
		  
		[XmlAttribute("Adddate")]
		[Bindable(true)]
		public DateTime? Adddate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Adddate); }
			set { SetColumnValue(Columns.Adddate, value); }
		}
		  
		[XmlAttribute("Usertype")]
		[Bindable(true)]
		public int Usertype 
		{
			get { return GetColumnValue<int>(Columns.Usertype); }
			set { SetColumnValue(Columns.Usertype, value); }
		}
		  
		[XmlAttribute("Collectorareacode")]
		[Bindable(true)]
		public string Collectorareacode 
		{
			get { return GetColumnValue<string>(Columns.Collectorareacode); }
			set { SetColumnValue(Columns.Collectorareacode, value); }
		}
		  
		[XmlAttribute("Location")]
		[Bindable(true)]
		public string Location 
		{
			get { return GetColumnValue<string>(Columns.Location); }
			set { SetColumnValue(Columns.Location, value); }
		}
		  
		[XmlAttribute("Departcode")]
		[Bindable(true)]
		public int? Departcode 
		{
			get { return GetColumnValue<int?>(Columns.Departcode); }
			set { SetColumnValue(Columns.Departcode, value); }
		}
		  
		[XmlAttribute("Communitycode")]
		[Bindable(true)]
		public string Communitycode 
		{
			get { return GetColumnValue<string>(Columns.Communitycode); }
			set { SetColumnValue(Columns.Communitycode, value); }
		}
		  
		[XmlAttribute("Streetcode")]
		[Bindable(true)]
		public string Streetcode 
		{
			get { return GetColumnValue<string>(Columns.Streetcode); }
			set { SetColumnValue(Columns.Streetcode, value); }
		}
		  
		[XmlAttribute("Collectorgpsstate")]
		[Bindable(true)]
		public int? Collectorgpsstate 
		{
			get { return GetColumnValue<int?>(Columns.Collectorgpsstate); }
			set { SetColumnValue(Columns.Collectorgpsstate, value); }
		}
		  
		[XmlAttribute("Localtionupdate")]
		[Bindable(true)]
		public DateTime? Localtionupdate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Localtionupdate); }
			set { SetColumnValue(Columns.Localtionupdate, value); }
		}
		  
		[XmlAttribute("Isdel")]
		[Bindable(true)]
		public bool Isdel 
		{
			get { return GetColumnValue<bool>(Columns.Isdel); }
			set { SetColumnValue(Columns.Isdel, value); }
		}
		  
		[XmlAttribute("Isleader")]
		[Bindable(true)]
		public bool Isleader 
		{
			get { return GetColumnValue<bool>(Columns.Isleader); }
			set { SetColumnValue(Columns.Isleader, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int? varUserid,string varUsername,string varUsermobile,string varUsertel,string varUseremail,string varLoginname,string varPassword,string varUserphoto,string varUsersex,int? varRoleid,int? varLoginstate,int? varAccountdtate,DateTime? varLastlogintime,string varLastloginip,DateTime? varAdddate,int varUsertype,string varCollectorareacode,string varLocation,int? varDepartcode,string varCommunitycode,string varStreetcode,int? varCollectorgpsstate,DateTime? varLocaltionupdate,bool varIsdel,bool varIsleader)
		{
			User item = new User();
			
			item.Userid = varUserid;
			
			item.Username = varUsername;
			
			item.Usermobile = varUsermobile;
			
			item.Usertel = varUsertel;
			
			item.Useremail = varUseremail;
			
			item.Loginname = varLoginname;
			
			item.Password = varPassword;
			
			item.Userphoto = varUserphoto;
			
			item.Usersex = varUsersex;
			
			item.Roleid = varRoleid;
			
			item.Loginstate = varLoginstate;
			
			item.Accountdtate = varAccountdtate;
			
			item.Lastlogintime = varLastlogintime;
			
			item.Lastloginip = varLastloginip;
			
			item.Adddate = varAdddate;
			
			item.Usertype = varUsertype;
			
			item.Collectorareacode = varCollectorareacode;
			
			item.Location = varLocation;
			
			item.Departcode = varDepartcode;
			
			item.Communitycode = varCommunitycode;
			
			item.Streetcode = varStreetcode;
			
			item.Collectorgpsstate = varCollectorgpsstate;
			
			item.Localtionupdate = varLocaltionupdate;
			
			item.Isdel = varIsdel;
			
			item.Isleader = varIsleader;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int? varUserid,string varUsername,string varUsermobile,string varUsertel,string varUseremail,string varLoginname,string varPassword,string varUserphoto,string varUsersex,int? varRoleid,int? varLoginstate,int? varAccountdtate,DateTime? varLastlogintime,string varLastloginip,DateTime? varAdddate,int varUsertype,string varCollectorareacode,string varLocation,int? varDepartcode,string varCommunitycode,string varStreetcode,int? varCollectorgpsstate,DateTime? varLocaltionupdate,bool varIsdel,bool varIsleader)
		{
			User item = new User();
			
				item.Id = varId;
			
				item.Userid = varUserid;
			
				item.Username = varUsername;
			
				item.Usermobile = varUsermobile;
			
				item.Usertel = varUsertel;
			
				item.Useremail = varUseremail;
			
				item.Loginname = varLoginname;
			
				item.Password = varPassword;
			
				item.Userphoto = varUserphoto;
			
				item.Usersex = varUsersex;
			
				item.Roleid = varRoleid;
			
				item.Loginstate = varLoginstate;
			
				item.Accountdtate = varAccountdtate;
			
				item.Lastlogintime = varLastlogintime;
			
				item.Lastloginip = varLastloginip;
			
				item.Adddate = varAdddate;
			
				item.Usertype = varUsertype;
			
				item.Collectorareacode = varCollectorareacode;
			
				item.Location = varLocation;
			
				item.Departcode = varDepartcode;
			
				item.Communitycode = varCommunitycode;
			
				item.Streetcode = varStreetcode;
			
				item.Collectorgpsstate = varCollectorgpsstate;
			
				item.Localtionupdate = varLocaltionupdate;
			
				item.Isdel = varIsdel;
			
				item.Isleader = varIsleader;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn UseridColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn UsernameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn UsermobileColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn UsertelColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn UseremailColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn LoginnameColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn PasswordColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn UserphotoColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn UsersexColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn RoleidColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn LoginstateColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn AccountdtateColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn LastlogintimeColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        public static TableSchema.TableColumn LastloginipColumn
        {
            get { return Schema.Columns[14]; }
        }
        
        
        
        public static TableSchema.TableColumn AdddateColumn
        {
            get { return Schema.Columns[15]; }
        }
        
        
        
        public static TableSchema.TableColumn UsertypeColumn
        {
            get { return Schema.Columns[16]; }
        }
        
        
        
        public static TableSchema.TableColumn CollectorareacodeColumn
        {
            get { return Schema.Columns[17]; }
        }
        
        
        
        public static TableSchema.TableColumn LocationColumn
        {
            get { return Schema.Columns[18]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartcodeColumn
        {
            get { return Schema.Columns[19]; }
        }
        
        
        
        public static TableSchema.TableColumn CommunitycodeColumn
        {
            get { return Schema.Columns[20]; }
        }
        
        
        
        public static TableSchema.TableColumn StreetcodeColumn
        {
            get { return Schema.Columns[21]; }
        }
        
        
        
        public static TableSchema.TableColumn CollectorgpsstateColumn
        {
            get { return Schema.Columns[22]; }
        }
        
        
        
        public static TableSchema.TableColumn LocaltionupdateColumn
        {
            get { return Schema.Columns[23]; }
        }
        
        
        
        public static TableSchema.TableColumn IsdelColumn
        {
            get { return Schema.Columns[24]; }
        }
        
        
        
        public static TableSchema.TableColumn IsleaderColumn
        {
            get { return Schema.Columns[25]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Userid = @"userid";
			 public static string Username = @"username";
			 public static string Usermobile = @"usermobile";
			 public static string Usertel = @"usertel";
			 public static string Useremail = @"useremail";
			 public static string Loginname = @"loginname";
			 public static string Password = @"password";
			 public static string Userphoto = @"userphoto";
			 public static string Usersex = @"usersex";
			 public static string Roleid = @"roleid";
			 public static string Loginstate = @"loginstate";
			 public static string Accountdtate = @"accountdtate";
			 public static string Lastlogintime = @"lastlogintime";
			 public static string Lastloginip = @"lastloginip";
			 public static string Adddate = @"adddate";
			 public static string Usertype = @"usertype";
			 public static string Collectorareacode = @"collectorareacode";
			 public static string Location = @"location";
			 public static string Departcode = @"departcode";
			 public static string Communitycode = @"communitycode";
			 public static string Streetcode = @"streetcode";
			 public static string Collectorgpsstate = @"collectorgpsstate";
			 public static string Localtionupdate = @"localtionupdate";
			 public static string Isdel = @"isdel";
			 public static string Isleader = @"isleader";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
