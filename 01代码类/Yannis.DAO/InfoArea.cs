using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Yannis.DAO
{
	/// <summary>
	/// Strongly-typed collection for the InfoArea class.
	/// </summary>
    [Serializable]
	public partial class InfoAreaCollection : ActiveList<InfoArea, InfoAreaCollection>
	{	   
		public InfoAreaCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>InfoAreaCollection</returns>
		public InfoAreaCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                InfoArea o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the info_area table.
	/// </summary>
	[Serializable]
	public partial class InfoArea : ActiveRecord<InfoArea>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public InfoArea()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public InfoArea(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public InfoArea(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public InfoArea(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("info_area", TableType.Table, DataService.GetInstance("Yannis_DAO"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarProjcode = new TableSchema.TableColumn(schema);
				colvarProjcode.ColumnName = "projcode";
				colvarProjcode.DataType = DbType.String;
				colvarProjcode.MaxLength = 50;
				colvarProjcode.AutoIncrement = false;
				colvarProjcode.IsNullable = true;
				colvarProjcode.IsPrimaryKey = false;
				colvarProjcode.IsForeignKey = false;
				colvarProjcode.IsReadOnly = false;
				colvarProjcode.DefaultSetting = @"";
				colvarProjcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProjcode);
				
				TableSchema.TableColumn colvarAreacode = new TableSchema.TableColumn(schema);
				colvarAreacode.ColumnName = "areacode";
				colvarAreacode.DataType = DbType.String;
				colvarAreacode.MaxLength = 50;
				colvarAreacode.AutoIncrement = false;
				colvarAreacode.IsNullable = true;
				colvarAreacode.IsPrimaryKey = false;
				colvarAreacode.IsForeignKey = false;
				colvarAreacode.IsReadOnly = false;
				colvarAreacode.DefaultSetting = @"";
				colvarAreacode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAreacode);
				
				TableSchema.TableColumn colvarAdddate = new TableSchema.TableColumn(schema);
				colvarAdddate.ColumnName = "adddate";
				colvarAdddate.DataType = DbType.DateTime;
				colvarAdddate.MaxLength = 0;
				colvarAdddate.AutoIncrement = false;
				colvarAdddate.IsNullable = true;
				colvarAdddate.IsPrimaryKey = false;
				colvarAdddate.IsForeignKey = false;
				colvarAdddate.IsReadOnly = false;
				colvarAdddate.DefaultSetting = @"";
				colvarAdddate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdddate);
				
				TableSchema.TableColumn colvarStreetcode = new TableSchema.TableColumn(schema);
				colvarStreetcode.ColumnName = "streetcode";
				colvarStreetcode.DataType = DbType.String;
				colvarStreetcode.MaxLength = 50;
				colvarStreetcode.AutoIncrement = false;
				colvarStreetcode.IsNullable = true;
				colvarStreetcode.IsPrimaryKey = false;
				colvarStreetcode.IsForeignKey = false;
				colvarStreetcode.IsReadOnly = false;
				colvarStreetcode.DefaultSetting = @"";
				colvarStreetcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetcode);
				
				TableSchema.TableColumn colvarCommnuitycode = new TableSchema.TableColumn(schema);
				colvarCommnuitycode.ColumnName = "commnuitycode";
				colvarCommnuitycode.DataType = DbType.String;
				colvarCommnuitycode.MaxLength = 50;
				colvarCommnuitycode.AutoIncrement = false;
				colvarCommnuitycode.IsNullable = true;
				colvarCommnuitycode.IsPrimaryKey = false;
				colvarCommnuitycode.IsForeignKey = false;
				colvarCommnuitycode.IsReadOnly = false;
				colvarCommnuitycode.DefaultSetting = @"";
				colvarCommnuitycode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommnuitycode);
				
				TableSchema.TableColumn colvarAreaname = new TableSchema.TableColumn(schema);
				colvarAreaname.ColumnName = "areaname";
				colvarAreaname.DataType = DbType.String;
				colvarAreaname.MaxLength = 50;
				colvarAreaname.AutoIncrement = false;
				colvarAreaname.IsNullable = true;
				colvarAreaname.IsPrimaryKey = false;
				colvarAreaname.IsForeignKey = false;
				colvarAreaname.IsReadOnly = false;
				colvarAreaname.DefaultSetting = @"";
				colvarAreaname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAreaname);
				
				TableSchema.TableColumn colvarStreetname = new TableSchema.TableColumn(schema);
				colvarStreetname.ColumnName = "streetname";
				colvarStreetname.DataType = DbType.String;
				colvarStreetname.MaxLength = 50;
				colvarStreetname.AutoIncrement = false;
				colvarStreetname.IsNullable = true;
				colvarStreetname.IsPrimaryKey = false;
				colvarStreetname.IsForeignKey = false;
				colvarStreetname.IsReadOnly = false;
				colvarStreetname.DefaultSetting = @"";
				colvarStreetname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetname);
				
				TableSchema.TableColumn colvarCommnuityname = new TableSchema.TableColumn(schema);
				colvarCommnuityname.ColumnName = "commnuityname";
				colvarCommnuityname.DataType = DbType.String;
				colvarCommnuityname.MaxLength = 50;
				colvarCommnuityname.AutoIncrement = false;
				colvarCommnuityname.IsNullable = true;
				colvarCommnuityname.IsPrimaryKey = false;
				colvarCommnuityname.IsForeignKey = false;
				colvarCommnuityname.IsReadOnly = false;
				colvarCommnuityname.DefaultSetting = @"";
				colvarCommnuityname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCommnuityname);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Yannis_DAO"].AddSchema("info_area",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Projcode")]
		[Bindable(true)]
		public string Projcode 
		{
			get { return GetColumnValue<string>(Columns.Projcode); }
			set { SetColumnValue(Columns.Projcode, value); }
		}
		  
		[XmlAttribute("Areacode")]
		[Bindable(true)]
		public string Areacode 
		{
			get { return GetColumnValue<string>(Columns.Areacode); }
			set { SetColumnValue(Columns.Areacode, value); }
		}
		  
		[XmlAttribute("Adddate")]
		[Bindable(true)]
		public DateTime? Adddate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Adddate); }
			set { SetColumnValue(Columns.Adddate, value); }
		}
		  
		[XmlAttribute("Streetcode")]
		[Bindable(true)]
		public string Streetcode 
		{
			get { return GetColumnValue<string>(Columns.Streetcode); }
			set { SetColumnValue(Columns.Streetcode, value); }
		}
		  
		[XmlAttribute("Commnuitycode")]
		[Bindable(true)]
		public string Commnuitycode 
		{
			get { return GetColumnValue<string>(Columns.Commnuitycode); }
			set { SetColumnValue(Columns.Commnuitycode, value); }
		}
		  
		[XmlAttribute("Areaname")]
		[Bindable(true)]
		public string Areaname 
		{
			get { return GetColumnValue<string>(Columns.Areaname); }
			set { SetColumnValue(Columns.Areaname, value); }
		}
		  
		[XmlAttribute("Streetname")]
		[Bindable(true)]
		public string Streetname 
		{
			get { return GetColumnValue<string>(Columns.Streetname); }
			set { SetColumnValue(Columns.Streetname, value); }
		}
		  
		[XmlAttribute("Commnuityname")]
		[Bindable(true)]
		public string Commnuityname 
		{
			get { return GetColumnValue<string>(Columns.Commnuityname); }
			set { SetColumnValue(Columns.Commnuityname, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varProjcode,string varAreacode,DateTime? varAdddate,string varStreetcode,string varCommnuitycode,string varAreaname,string varStreetname,string varCommnuityname)
		{
			InfoArea item = new InfoArea();
			
			item.Projcode = varProjcode;
			
			item.Areacode = varAreacode;
			
			item.Adddate = varAdddate;
			
			item.Streetcode = varStreetcode;
			
			item.Commnuitycode = varCommnuitycode;
			
			item.Areaname = varAreaname;
			
			item.Streetname = varStreetname;
			
			item.Commnuityname = varCommnuityname;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varProjcode,string varAreacode,DateTime? varAdddate,string varStreetcode,string varCommnuitycode,string varAreaname,string varStreetname,string varCommnuityname)
		{
			InfoArea item = new InfoArea();
			
				item.Id = varId;
			
				item.Projcode = varProjcode;
			
				item.Areacode = varAreacode;
			
				item.Adddate = varAdddate;
			
				item.Streetcode = varStreetcode;
			
				item.Commnuitycode = varCommnuitycode;
			
				item.Areaname = varAreaname;
			
				item.Streetname = varStreetname;
			
				item.Commnuityname = varCommnuityname;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn ProjcodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AreacodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn AdddateColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn StreetcodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CommnuitycodeColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn AreanameColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn StreetnameColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn CommnuitynameColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Projcode = @"projcode";
			 public static string Areacode = @"areacode";
			 public static string Adddate = @"adddate";
			 public static string Streetcode = @"streetcode";
			 public static string Commnuitycode = @"commnuitycode";
			 public static string Areaname = @"areaname";
			 public static string Streetname = @"streetname";
			 public static string Commnuityname = @"commnuityname";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
