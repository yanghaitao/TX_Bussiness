using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Yannis.DAO
{
	/// <summary>
	/// Strongly-typed collection for the Depart class.
	/// </summary>
    [Serializable]
	public partial class DepartCollection : ActiveList<Depart, DepartCollection>
	{	   
		public DepartCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>DepartCollection</returns>
		public DepartCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                Depart o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the depart table.
	/// </summary>
	[Serializable]
	public partial class Depart : ActiveRecord<Depart>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public Depart()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public Depart(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public Depart(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public Depart(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("depart", TableType.Table, DataService.GetInstance("Yannis_DAO"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarDepartcode = new TableSchema.TableColumn(schema);
				colvarDepartcode.ColumnName = "departcode";
				colvarDepartcode.DataType = DbType.String;
				colvarDepartcode.MaxLength = 50;
				colvarDepartcode.AutoIncrement = false;
				colvarDepartcode.IsNullable = true;
				colvarDepartcode.IsPrimaryKey = false;
				colvarDepartcode.IsForeignKey = false;
				colvarDepartcode.IsReadOnly = false;
				colvarDepartcode.DefaultSetting = @"";
				colvarDepartcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartcode);
				
				TableSchema.TableColumn colvarDepartname = new TableSchema.TableColumn(schema);
				colvarDepartname.ColumnName = "departname";
				colvarDepartname.DataType = DbType.String;
				colvarDepartname.MaxLength = 50;
				colvarDepartname.AutoIncrement = false;
				colvarDepartname.IsNullable = true;
				colvarDepartname.IsPrimaryKey = false;
				colvarDepartname.IsForeignKey = false;
				colvarDepartname.IsReadOnly = false;
				colvarDepartname.DefaultSetting = @"";
				colvarDepartname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartname);
				
				TableSchema.TableColumn colvarParentcode = new TableSchema.TableColumn(schema);
				colvarParentcode.ColumnName = "parentcode";
				colvarParentcode.DataType = DbType.String;
				colvarParentcode.MaxLength = 50;
				colvarParentcode.AutoIncrement = false;
				colvarParentcode.IsNullable = true;
				colvarParentcode.IsPrimaryKey = false;
				colvarParentcode.IsForeignKey = false;
				colvarParentcode.IsReadOnly = false;
				colvarParentcode.DefaultSetting = @"";
				colvarParentcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarParentcode);
				
				TableSchema.TableColumn colvarAreacode = new TableSchema.TableColumn(schema);
				colvarAreacode.ColumnName = "areacode";
				colvarAreacode.DataType = DbType.Int32;
				colvarAreacode.MaxLength = 0;
				colvarAreacode.AutoIncrement = false;
				colvarAreacode.IsNullable = true;
				colvarAreacode.IsPrimaryKey = false;
				colvarAreacode.IsForeignKey = false;
				colvarAreacode.IsReadOnly = false;
				colvarAreacode.DefaultSetting = @"";
				colvarAreacode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAreacode);
				
				TableSchema.TableColumn colvarDepartmobile = new TableSchema.TableColumn(schema);
				colvarDepartmobile.ColumnName = "departmobile";
				colvarDepartmobile.DataType = DbType.String;
				colvarDepartmobile.MaxLength = 50;
				colvarDepartmobile.AutoIncrement = false;
				colvarDepartmobile.IsNullable = true;
				colvarDepartmobile.IsPrimaryKey = false;
				colvarDepartmobile.IsForeignKey = false;
				colvarDepartmobile.IsReadOnly = false;
				colvarDepartmobile.DefaultSetting = @"";
				colvarDepartmobile.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartmobile);
				
				TableSchema.TableColumn colvarDeparttel = new TableSchema.TableColumn(schema);
				colvarDeparttel.ColumnName = "departtel";
				colvarDeparttel.DataType = DbType.String;
				colvarDeparttel.MaxLength = 50;
				colvarDeparttel.AutoIncrement = false;
				colvarDeparttel.IsNullable = true;
				colvarDeparttel.IsPrimaryKey = false;
				colvarDeparttel.IsForeignKey = false;
				colvarDeparttel.IsReadOnly = false;
				colvarDeparttel.DefaultSetting = @"";
				colvarDeparttel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDeparttel);
				
				TableSchema.TableColumn colvarDepartstate = new TableSchema.TableColumn(schema);
				colvarDepartstate.ColumnName = "departstate";
				colvarDepartstate.DataType = DbType.Int32;
				colvarDepartstate.MaxLength = 0;
				colvarDepartstate.AutoIncrement = false;
				colvarDepartstate.IsNullable = true;
				colvarDepartstate.IsPrimaryKey = false;
				colvarDepartstate.IsForeignKey = false;
				colvarDepartstate.IsReadOnly = false;
				colvarDepartstate.DefaultSetting = @"";
				colvarDepartstate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarDepartstate);
				
				TableSchema.TableColumn colvarIsacceptmessage = new TableSchema.TableColumn(schema);
				colvarIsacceptmessage.ColumnName = "isacceptmessage";
				colvarIsacceptmessage.DataType = DbType.Int32;
				colvarIsacceptmessage.MaxLength = 0;
				colvarIsacceptmessage.AutoIncrement = false;
				colvarIsacceptmessage.IsNullable = true;
				colvarIsacceptmessage.IsPrimaryKey = false;
				colvarIsacceptmessage.IsForeignKey = false;
				colvarIsacceptmessage.IsReadOnly = false;
				colvarIsacceptmessage.DefaultSetting = @"";
				colvarIsacceptmessage.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsacceptmessage);
				
				TableSchema.TableColumn colvarMark = new TableSchema.TableColumn(schema);
				colvarMark.ColumnName = "mark";
				colvarMark.DataType = DbType.String;
				colvarMark.MaxLength = 200;
				colvarMark.AutoIncrement = false;
				colvarMark.IsNullable = true;
				colvarMark.IsPrimaryKey = false;
				colvarMark.IsForeignKey = false;
				colvarMark.IsReadOnly = false;
				colvarMark.DefaultSetting = @"";
				colvarMark.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMark);
				
				TableSchema.TableColumn colvarAdddate = new TableSchema.TableColumn(schema);
				colvarAdddate.ColumnName = "adddate";
				colvarAdddate.DataType = DbType.DateTime;
				colvarAdddate.MaxLength = 0;
				colvarAdddate.AutoIncrement = false;
				colvarAdddate.IsNullable = true;
				colvarAdddate.IsPrimaryKey = false;
				colvarAdddate.IsForeignKey = false;
				colvarAdddate.IsReadOnly = false;
				colvarAdddate.DefaultSetting = @"";
				colvarAdddate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAdddate);
				
				TableSchema.TableColumn colvarRolecode = new TableSchema.TableColumn(schema);
				colvarRolecode.ColumnName = "rolecode";
				colvarRolecode.DataType = DbType.String;
				colvarRolecode.MaxLength = 50;
				colvarRolecode.AutoIncrement = false;
				colvarRolecode.IsNullable = true;
				colvarRolecode.IsPrimaryKey = false;
				colvarRolecode.IsForeignKey = false;
				colvarRolecode.IsReadOnly = false;
				colvarRolecode.DefaultSetting = @"";
				colvarRolecode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRolecode);
				
				TableSchema.TableColumn colvarIsdel = new TableSchema.TableColumn(schema);
				colvarIsdel.ColumnName = "isdel";
				colvarIsdel.DataType = DbType.Boolean;
				colvarIsdel.MaxLength = 0;
				colvarIsdel.AutoIncrement = false;
				colvarIsdel.IsNullable = true;
				colvarIsdel.IsPrimaryKey = false;
				colvarIsdel.IsForeignKey = false;
				colvarIsdel.IsReadOnly = false;
				
						colvarIsdel.DefaultSetting = @"((0))";
				colvarIsdel.ForeignKeyTableName = "";
				schema.Columns.Add(colvarIsdel);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Yannis_DAO"].AddSchema("depart",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Departcode")]
		[Bindable(true)]
		public string Departcode 
		{
			get { return GetColumnValue<string>(Columns.Departcode); }
			set { SetColumnValue(Columns.Departcode, value); }
		}
		  
		[XmlAttribute("Departname")]
		[Bindable(true)]
		public string Departname 
		{
			get { return GetColumnValue<string>(Columns.Departname); }
			set { SetColumnValue(Columns.Departname, value); }
		}
		  
		[XmlAttribute("Parentcode")]
		[Bindable(true)]
		public string Parentcode 
		{
			get { return GetColumnValue<string>(Columns.Parentcode); }
			set { SetColumnValue(Columns.Parentcode, value); }
		}
		  
		[XmlAttribute("Areacode")]
		[Bindable(true)]
		public int? Areacode 
		{
			get { return GetColumnValue<int?>(Columns.Areacode); }
			set { SetColumnValue(Columns.Areacode, value); }
		}
		  
		[XmlAttribute("Departmobile")]
		[Bindable(true)]
		public string Departmobile 
		{
			get { return GetColumnValue<string>(Columns.Departmobile); }
			set { SetColumnValue(Columns.Departmobile, value); }
		}
		  
		[XmlAttribute("Departtel")]
		[Bindable(true)]
		public string Departtel 
		{
			get { return GetColumnValue<string>(Columns.Departtel); }
			set { SetColumnValue(Columns.Departtel, value); }
		}
		  
		[XmlAttribute("Departstate")]
		[Bindable(true)]
		public int? Departstate 
		{
			get { return GetColumnValue<int?>(Columns.Departstate); }
			set { SetColumnValue(Columns.Departstate, value); }
		}
		  
		[XmlAttribute("Isacceptmessage")]
		[Bindable(true)]
		public int? Isacceptmessage 
		{
			get { return GetColumnValue<int?>(Columns.Isacceptmessage); }
			set { SetColumnValue(Columns.Isacceptmessage, value); }
		}
		  
		[XmlAttribute("Mark")]
		[Bindable(true)]
		public string Mark 
		{
			get { return GetColumnValue<string>(Columns.Mark); }
			set { SetColumnValue(Columns.Mark, value); }
		}
		  
		[XmlAttribute("Adddate")]
		[Bindable(true)]
		public DateTime? Adddate 
		{
			get { return GetColumnValue<DateTime?>(Columns.Adddate); }
			set { SetColumnValue(Columns.Adddate, value); }
		}
		  
		[XmlAttribute("Rolecode")]
		[Bindable(true)]
		public string Rolecode 
		{
			get { return GetColumnValue<string>(Columns.Rolecode); }
			set { SetColumnValue(Columns.Rolecode, value); }
		}
		  
		[XmlAttribute("Isdel")]
		[Bindable(true)]
		public bool? Isdel 
		{
			get { return GetColumnValue<bool?>(Columns.Isdel); }
			set { SetColumnValue(Columns.Isdel, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varDepartcode,string varDepartname,string varParentcode,int? varAreacode,string varDepartmobile,string varDeparttel,int? varDepartstate,int? varIsacceptmessage,string varMark,DateTime? varAdddate,string varRolecode,bool? varIsdel)
		{
			Depart item = new Depart();
			
			item.Departcode = varDepartcode;
			
			item.Departname = varDepartname;
			
			item.Parentcode = varParentcode;
			
			item.Areacode = varAreacode;
			
			item.Departmobile = varDepartmobile;
			
			item.Departtel = varDeparttel;
			
			item.Departstate = varDepartstate;
			
			item.Isacceptmessage = varIsacceptmessage;
			
			item.Mark = varMark;
			
			item.Adddate = varAdddate;
			
			item.Rolecode = varRolecode;
			
			item.Isdel = varIsdel;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varDepartcode,string varDepartname,string varParentcode,int? varAreacode,string varDepartmobile,string varDeparttel,int? varDepartstate,int? varIsacceptmessage,string varMark,DateTime? varAdddate,string varRolecode,bool? varIsdel)
		{
			Depart item = new Depart();
			
				item.Id = varId;
			
				item.Departcode = varDepartcode;
			
				item.Departname = varDepartname;
			
				item.Parentcode = varParentcode;
			
				item.Areacode = varAreacode;
			
				item.Departmobile = varDepartmobile;
			
				item.Departtel = varDeparttel;
			
				item.Departstate = varDepartstate;
			
				item.Isacceptmessage = varIsacceptmessage;
			
				item.Mark = varMark;
			
				item.Adddate = varAdddate;
			
				item.Rolecode = varRolecode;
			
				item.Isdel = varIsdel;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartcodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartnameColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ParentcodeColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn AreacodeColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartmobileColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn DeparttelColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn DepartstateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn IsacceptmessageColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn MarkColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AdddateColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn RolecodeColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn IsdelColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Departcode = @"departcode";
			 public static string Departname = @"departname";
			 public static string Parentcode = @"parentcode";
			 public static string Areacode = @"areacode";
			 public static string Departmobile = @"departmobile";
			 public static string Departtel = @"departtel";
			 public static string Departstate = @"departstate";
			 public static string Isacceptmessage = @"isacceptmessage";
			 public static string Mark = @"mark";
			 public static string Adddate = @"adddate";
			 public static string Rolecode = @"rolecode";
			 public static string Isdel = @"isdel";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
