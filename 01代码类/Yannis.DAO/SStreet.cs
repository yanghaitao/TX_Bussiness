using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace Yannis.DAO
{
	/// <summary>
	/// Strongly-typed collection for the SStreet class.
	/// </summary>
    [Serializable]
	public partial class SStreetCollection : ActiveList<SStreet, SStreetCollection>
	{	   
		public SStreetCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>SStreetCollection</returns>
		public SStreetCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                SStreet o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the s_street table.
	/// </summary>
	[Serializable]
	public partial class SStreet : ActiveRecord<SStreet>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public SStreet()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public SStreet(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public SStreet(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public SStreet(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("s_street", TableType.Table, DataService.GetInstance("Yannis_DAO"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"dbo";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 0;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = false;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarStreetcode = new TableSchema.TableColumn(schema);
				colvarStreetcode.ColumnName = "streetcode";
				colvarStreetcode.DataType = DbType.Int32;
				colvarStreetcode.MaxLength = 0;
				colvarStreetcode.AutoIncrement = false;
				colvarStreetcode.IsNullable = false;
				colvarStreetcode.IsPrimaryKey = true;
				colvarStreetcode.IsForeignKey = false;
				colvarStreetcode.IsReadOnly = false;
				colvarStreetcode.DefaultSetting = @"";
				colvarStreetcode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetcode);
				
				TableSchema.TableColumn colvarAreacode = new TableSchema.TableColumn(schema);
				colvarAreacode.ColumnName = "areacode";
				colvarAreacode.DataType = DbType.Int32;
				colvarAreacode.MaxLength = 0;
				colvarAreacode.AutoIncrement = false;
				colvarAreacode.IsNullable = true;
				colvarAreacode.IsPrimaryKey = false;
				colvarAreacode.IsForeignKey = false;
				colvarAreacode.IsReadOnly = false;
				colvarAreacode.DefaultSetting = @"";
				colvarAreacode.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAreacode);
				
				TableSchema.TableColumn colvarStreetname = new TableSchema.TableColumn(schema);
				colvarStreetname.ColumnName = "streetname";
				colvarStreetname.DataType = DbType.AnsiString;
				colvarStreetname.MaxLength = 100;
				colvarStreetname.AutoIncrement = false;
				colvarStreetname.IsNullable = true;
				colvarStreetname.IsPrimaryKey = false;
				colvarStreetname.IsForeignKey = false;
				colvarStreetname.IsReadOnly = false;
				colvarStreetname.DefaultSetting = @"";
				colvarStreetname.ForeignKeyTableName = "";
				schema.Columns.Add(colvarStreetname);
				
				TableSchema.TableColumn colvarPopulation = new TableSchema.TableColumn(schema);
				colvarPopulation.ColumnName = "population";
				colvarPopulation.DataType = DbType.Decimal;
				colvarPopulation.MaxLength = 0;
				colvarPopulation.AutoIncrement = false;
				colvarPopulation.IsNullable = true;
				colvarPopulation.IsPrimaryKey = false;
				colvarPopulation.IsForeignKey = false;
				colvarPopulation.IsReadOnly = false;
				colvarPopulation.DefaultSetting = @"";
				colvarPopulation.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPopulation);
				
				TableSchema.TableColumn colvarArea = new TableSchema.TableColumn(schema);
				colvarArea.ColumnName = "area";
				colvarArea.DataType = DbType.Decimal;
				colvarArea.MaxLength = 0;
				colvarArea.AutoIncrement = false;
				colvarArea.IsNullable = true;
				colvarArea.IsPrimaryKey = false;
				colvarArea.IsForeignKey = false;
				colvarArea.IsReadOnly = false;
				colvarArea.DefaultSetting = @"";
				colvarArea.ForeignKeyTableName = "";
				schema.Columns.Add(colvarArea);
				
				TableSchema.TableColumn colvarMemo = new TableSchema.TableColumn(schema);
				colvarMemo.ColumnName = "memo";
				colvarMemo.DataType = DbType.AnsiString;
				colvarMemo.MaxLength = 512;
				colvarMemo.AutoIncrement = false;
				colvarMemo.IsNullable = true;
				colvarMemo.IsPrimaryKey = false;
				colvarMemo.IsForeignKey = false;
				colvarMemo.IsReadOnly = false;
				colvarMemo.DefaultSetting = @"";
				colvarMemo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarMemo);
				
				TableSchema.TableColumn colvarXh = new TableSchema.TableColumn(schema);
				colvarXh.ColumnName = "xh";
				colvarXh.DataType = DbType.Int32;
				colvarXh.MaxLength = 0;
				colvarXh.AutoIncrement = false;
				colvarXh.IsNullable = true;
				colvarXh.IsPrimaryKey = false;
				colvarXh.IsForeignKey = false;
				colvarXh.IsReadOnly = false;
				colvarXh.DefaultSetting = @"";
				colvarXh.ForeignKeyTableName = "";
				schema.Columns.Add(colvarXh);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["Yannis_DAO"].AddSchema("s_street",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("Streetcode")]
		[Bindable(true)]
		public int Streetcode 
		{
			get { return GetColumnValue<int>(Columns.Streetcode); }
			set { SetColumnValue(Columns.Streetcode, value); }
		}
		  
		[XmlAttribute("Areacode")]
		[Bindable(true)]
		public int? Areacode 
		{
			get { return GetColumnValue<int?>(Columns.Areacode); }
			set { SetColumnValue(Columns.Areacode, value); }
		}
		  
		[XmlAttribute("Streetname")]
		[Bindable(true)]
		public string Streetname 
		{
			get { return GetColumnValue<string>(Columns.Streetname); }
			set { SetColumnValue(Columns.Streetname, value); }
		}
		  
		[XmlAttribute("Population")]
		[Bindable(true)]
		public decimal? Population 
		{
			get { return GetColumnValue<decimal?>(Columns.Population); }
			set { SetColumnValue(Columns.Population, value); }
		}
		  
		[XmlAttribute("Area")]
		[Bindable(true)]
		public decimal? Area 
		{
			get { return GetColumnValue<decimal?>(Columns.Area); }
			set { SetColumnValue(Columns.Area, value); }
		}
		  
		[XmlAttribute("Memo")]
		[Bindable(true)]
		public string Memo 
		{
			get { return GetColumnValue<string>(Columns.Memo); }
			set { SetColumnValue(Columns.Memo, value); }
		}
		  
		[XmlAttribute("Xh")]
		[Bindable(true)]
		public int? Xh 
		{
			get { return GetColumnValue<int?>(Columns.Xh); }
			set { SetColumnValue(Columns.Xh, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(int varStreetcode,int? varAreacode,string varStreetname,decimal? varPopulation,decimal? varArea,string varMemo,int? varXh)
		{
			SStreet item = new SStreet();
			
			item.Streetcode = varStreetcode;
			
			item.Areacode = varAreacode;
			
			item.Streetname = varStreetname;
			
			item.Population = varPopulation;
			
			item.Area = varArea;
			
			item.Memo = varMemo;
			
			item.Xh = varXh;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,int varStreetcode,int? varAreacode,string varStreetname,decimal? varPopulation,decimal? varArea,string varMemo,int? varXh)
		{
			SStreet item = new SStreet();
			
				item.Id = varId;
			
				item.Streetcode = varStreetcode;
			
				item.Areacode = varAreacode;
			
				item.Streetname = varStreetname;
			
				item.Population = varPopulation;
			
				item.Area = varArea;
			
				item.Memo = varMemo;
			
				item.Xh = varXh;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn StreetcodeColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn AreacodeColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn StreetnameColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn PopulationColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn AreaColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn MemoColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn XhColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string Streetcode = @"streetcode";
			 public static string Areacode = @"areacode";
			 public static string Streetname = @"streetname";
			 public static string Population = @"population";
			 public static string Area = @"area";
			 public static string Memo = @"memo";
			 public static string Xh = @"xh";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
