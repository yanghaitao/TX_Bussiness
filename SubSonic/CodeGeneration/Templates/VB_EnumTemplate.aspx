<%@ Page Language="C#" %>
<%@ Import namespace="SubSonic.Utilities" %>
<%@ Import Namespace="SubSonic" %>
<%@ Import Namespace="System.Data" %>

<%	const string providerName = "#PROVIDER#";
    ICodeLanguage language = new VBCodeLanguage();
	DataProvider provider = DataService.GetInstance(providerName);
	TableSchema.Table[] tableList = DataService.GetTables(providerName);
%>
' <auto-generated />
Namespace <%=provider.GeneratedNamespace %>
<%	foreach (TableSchema.Table tbl in tableList) {
		    %><%=SubSonic.EnumTemplateHelper.GetEnumScript(provider, tbl, provider.EnumShowDebugInfo, provider.EnumIncludeList, provider.EnumExcludeList, language) %><%
    } %>
}
<%
    // ----------------------------------------------------------------------------------------------------
    // INSTRUCTIONS
    // ----------------------------------------------------------------------------------------------------

    // Enum Generator Features
    // -----------------------
    //  - auto generates enum values from the row data in the tables
    //  - will generate regular enums for integer values or an 'enum-like' struct for string values
    //  - a single setting will generate enums for all lookup tables containing a standard prefix (eg. 'lk_'), and 
    //    generate a default enum name based on the table name
    //	- the enum name, and the value and description columns used to create the enum can be customised per-table
    //  - multiple enums can be generated from the same table 
    //  - a MULTI mode allows automated enum generation from a MUCK (Massively Unified Code-Key) general purpose lookup table
    //    (BTW MUCK tables are NOT a good idea, but in the tradition of SubSonic, we let you make the choice)
    //
    // Typical 'integer valued' table:
    //
    //   CategoryID  CategoryName   
    //   int         nvarchar(50)   
    //   ----------- ---------------
    //   1           Beverages       
    //   2           Condiments      
    //   3           Confections     
    //   4           Dairy Products  
    //   5           Grains/Cereals  
    //
    // Typical 'string valued' table:
    //
    //   State_Str     State
    //   nvarchar(10)  nvarchar(50)
    //   ------------  ----------------------------
    //   ACT           Australian Capital Territory
    //   NSW           New South Wales
    //   NT            Northern Territory
    //   QLD           Queensland
    //   SA            South Australia
    //   TAS           Tasmania
    //   VIC           Victoria
    //   WA            Western Australia
    //
    // Typical 'MUCK' table:
    //
    //   LookupKey                                          LookupVal    LookupDescLong
    //   nvarchar(50)                                       nvarchar(20) nvarchar(100)
    //   -------------------------------------------------- ----------   --------------------------
    //   AssignStatusStr                                    F            Fully
    //   AssignStatusStr                                    P            Partly
    //   AssignStatusStr                                    U            Not
    //   AssignStatusStr                                    X            n/a
    //   BatchAutoGenModeStr                                E            Assign to existing batch
    //   BatchAutoGenModeStr                                N            Make new batch
    //   BatchAutoGenModeStr                                X            Do not assign to batch
    //   BatchPackStatusStr                                 C            Cancelled
    //   BatchPackStatusStr                                 L            Locked
    //   BatchPackStatusStr                                 P            Packing
    //   BatchPackStatusStr                                 T            Complete
    //
    // Enum generation setting are in the app.config along with all other custom settings, eg:
    //  
    // <providers>
    //  <clear/>
    //    <add name="Northwind" type="SubSonic.SqlDataProvider, SubSonic" connectionStringName="Northwind" generatedNamespace="Northwind"
    //       enumIncludeList="^Categories$, ^Employees$, ^Products$, ^Region$, ^Shippers$, ^Suppliers$, ^Territories$" />
    // </providers>
    //
    // enumIncludeList      - a comma separated list of 'include' strings (see def below) matching tables to be included
    //                        (note the RegEx ^ is the start-of-string marker and $ is the end-of-string marker; without
    //                         these the string will also match a part of the table name, eg. 'Employees' RegEx string will match 
    //                         tables 'Employees' and 'EmployeesTerritories' where the '^Employees$' RegEx string will match 
    //                         only the table 'Employees')
    //
    // enumExcludeList      - a comma separated list of regex strings matching tables to be excluded from those included above
    //                        (eg. to match all tables starting with 'lk_' except for particular specified ones)
    //
    // enumShowDebugInfo    - (true/false) include information in the enum class file about matching of tables to 
    //                        the inclusion/exclusion list (for when you are having trouble with RegEx matches)
    //
    // 
    // FORMAT of include strings:   [table name regexp]:[enum name]:[id column name]:[descr column name]:[sql where clause]
    //
    //  - all params are optional except the first. if omitting an earlier parameter but using a later parameter then 
    //    still include the ':' as a placeholder
    //
    //   [table name regexp] = regular expression matching the table name.  can be just the table name.
    //
    //   [enum name] = the name to use for the enum (default=table name + 'Enum')
    //		- if the enum name is in the format MULTI=[KeyColName] then the key column values will be used to name 
    //		  the enum and to match the blocks of row values to be used for each enum
    //
    //   [id column name] = the name of the column to use for the enum value (default=PK col)
    //
    //   [descr column name] = the name of the column to use for the enum description (default=first text col)
    //
    //   [sql where clause] = where clause to use when retrieving the enum values (default=empty)
    //
    // EXAMPLES
    // 
    //  "lk_.+"
    //  - generates enums from all table in the database starting with 'lk_' using default names and columns
    //
    //  "tblLookupVals:AssignStatusEnumStr:LookupVal:LookupDescLong:where [LookupKey]='AssignStatusStr'"
    //  - generates the named enum from the designated table, using the designated columns and WHERE
    //
    //  "tblLookupVals:MULTI=LookupKey:LookupVal:LookupDescLong"
    //  - generates multiple enums from the 'tblLookupVals' MUCK table; one enum for each block of values in column 'LookupKey'
    //
    //  "lk_State:StateShortEnum:State_Str:State_Str"
    //  - generates an enum of 'short' state values only
    //
    //  "lk_State:StateLongEnum:State:State"
    //  - generates an enum of 'long' state values only
    //
    // };
%>